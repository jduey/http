
(add-ns p (git-dependency "github.com:jduey/parser.git" "parser.toc"))
(add-ns uri (git-dependency "github.com:jduey/uri.git" "uri.toc"))

(def octet (p/rule "octet"
                   (p/char-range (char 0) (char 255))))
(def character (p/rule "char"
                       (p/char-range (char 0) (char 127))))
(def ctl (p/rule "ctl"
                 (p/any (p/char-range (char 0) (char 31))
                       (p/term (char 127)))))
(def cr (p/rule "cr" (p/term (char 13))))
(def lf (p/rule "lf" (p/term (char 10))))
(def sp (p/rule "sp" (p/term (char 32))))
(def ht (p/rule "ht" (p/term (char 9))))
(def dbl-quote (p/rule "<\">" (p/term (char 34))))
(def crlf (p/rule "crlf" (p/any cr lf)))

(def lws (p/rule "lws"
                 (p/all (p/optional crlf)
                        (p/one-or-more (p/any sp ht)))))
(def text (p/rule "text"
                  (p/any lws
                        (p/char-range (char 32) (char 126))
                        (p/char-range (char 128) (char 255)))))

(def seperators (p/rule "seperators"
                        (p/any (p/one-of "()<>@,;:/[]?={}")
                              dbl-quote
                              sp
                              ht)))
(def token (p/rule "token"
                   (map (p/one-or-more (p/any (p/term (char 33))
                                             (p/char-range (char 35) (char 39))
                                             (p/term (char 42))
                                             (p/term (char 43))
                                             (p/term (char 45))
                                             (p/term (char 46))
                                             (p/char-range (char 48) (char 57))
                                             (p/char-range (char 65) (char 90))
                                             (p/term (char 92))
                                             (p/char-range (char 94) (char 122))
                                             (p/term (char 124))
                                             (p/term (char 126))))
                        to-str)))

(def quoted-pair (p/rule "quoted-pair"
                         (apply-to list (p/term "\\") character)))

(def qdtext (p/rule "qdtext"
                    (p/any lws
                          (p/char-range (char 35) (char 126))
                          (p/char-range (char 128) (char 255))
                          (p/char-range (char 32) (char 33)))))

(def inner-comment (p/recurse "comment"))

(def ctext (p/rule "text"
                   (p/any lws
                         (p/char-range (char 32) (char 39))
                         (p/char-range (char 42) (char 126))
                         (p/char-range (char 128) (char 255)))))

(def comment (p/recursive-rule "comment"
                               (p/all (p/term "(")
                                      (p/none-or-more (p/any ctext quoted-pair inner-comment))
                                      (p/term ")"))))

(def quoted-string (p/rule "quoted-string"
                           (p/all dbl-quote
                                  (p/none-or-more (p/any ctext quoted-pair comment)))))

(def http-version (p/rule "http-version"
                          (apply-to (fn [major minor]
                                      {:http-version {:major (str-to-int major)
                                                      :minor (str-to-int minor)}})
                                    (p/ignore (p/term "HTTP/"))
                                    (p/one-or-more p/digit)
                                    (p/ignore (p/term "."))
                                    (p/one-or-more p/digit))))

(def method (map (p/any (p/term "OPTIONS")
                       (p/term "GET")
                       (p/term "HEAD")
                       (p/term "POST")
                       (p/term "PUT")
                       (p/term "DELETE")
                       (p/term "TRACE")
                       token)
                 (partial hash-map :method)))

(def request-uri (p/rule "request-uri"
                         (p/any (apply-to comp
                                         (p/ignore (p/term "http://"))
                                         uri/hostport
                                         (p/any uri/abs-path
                                               (p/always {}))
                                         (p/optional uri/uri-query))
                               (apply-to comp
                                         uri/abs-path
                                         (p/optional uri/uri-query)))))

(def request-line (apply-to comp
                            method
                            (p/ignore (p/term " "))
                            request-uri
                            (p/ignore (p/term " "))
                            http-version))

(def field-value (map (p/none-or-more (p/any (map (p/one-or-more lws)
                                                 (constantly " "))
                                            text))
                      to-str))

(def message-header (p/all token
                           (p/ignore (p/term ":"))
                           (p/ignore (p/none-or-more lws))
                           (p/optional field-value)
                           (p/ignore crlf)))

(def request-message (apply-to comp
                               (p/ignore (p/none-or-more lws))
                               request-line
                               (p/ignore crlf)
                               (map (p/none-or-more message-header)
                                    (fn [headers]
                                      {:headers (apply hash-map (flatten headers))}))
                               (p/ignore crlf)))
